#!/usr/bin/env ruby

require 'erb'
require 'optparse'
require 'yaml'
include ERB::Util

MACKEREL_BASE_URL = "https://mackerel.io"

# parse command line options
OPTS = {}

opt = OptionParser.new
opt.on('-o orgName', 'organization name') { |o| OPTS[:org_name] = o }
opt.on('-s serviceName', 'service name') { |s| OPTS[:service_name] = s }
opt.on('-r roleName', 'role name') { |r| OPTS[:role_name] = r }
opt.on('-f [config.yaml]', 'config file(yaml)') { |c| OPTS[:config_file] = c }
opt.parse!(ARGV)

org_name = OPTS[:org_name]
service_name = OPTS[:service_name]
role_name = OPTS[:role_name]
config_file = OPTS[:config_file]
if (org_name.nil? or service_name.nil? or role_name.nil?)
  puts opt.help
  exit
end

# load configure

config = {
  "periods" => ["1d", "1w", "1mo"],
  "graph_names" => [
    "loadavg5",
    "cpu.{user,iowait,system}",
    "cpu.{user,system}",
    "cpu.user",
    "cpu.iowait",
    "cpu.system",
    "interface.rxBytes",
    "interface.txBytes",
    "interface.{rxBytes,txBytes}",
    "disk.reads",
    "disk.writes",
    "disk.{reads,writes}",
    "memory.used(stack)",
    "memory.used",
    "memory.cached"
  ],
  "graph_size" => {
    "height" => 200,
    "width" => 400
  }
}

class ::Hash
  def deep_merge(second)
    merger = proc { |key, v1, v2| Hash === v1 && Hash === v2 ? v1.merge(v2, &merger) : v2 }
    self.merge(second, &merger)
  end
end

unless (config_file.nil?)
  config = config.deep_merge(YAML.load_file(config_file))
end

# print markdown

def generate_graph_url(org_name, service_name, role_name, graph_name, period)
  "#{MACKEREL_BASE_URL}/embed/orgs/#{url_encode(org_name)}/services/#{url_encode(service_name)}/#{url_encode(role_name)}?graph=#{url_encode(graph_name)}&period=#{url_encode(period)}"
end

def generate_graph_iframe(url, height=200, width=400)
  "<iframe src='#{html_escape(url)}' height='#{height}' width='#{width}' frameborder='0'></iframe>"
end

config['graph_names'].each do |graph_name|
  puts "### #{graph_name}\n"

  puts "|#{config['periods'].join('|')}|"

  puts "#{'|:--' * config['periods'].size}|"

  graphs = config['periods'].map do |period|
    url = generate_graph_url(org_name, service_name, role_name, graph_name, period)
    generate_graph_iframe(url, config["graph_size"]["height"], config["graph_size"]["width"])
  end
  puts "|#{graphs.join('|')}|"

  puts "\n"
end
